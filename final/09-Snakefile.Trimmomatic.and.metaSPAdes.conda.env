# Using a manifest file to provide the input to the Snakemake workflow
# function() as input

import os
import pandas as pd
cwd = os.getcwd()


def load_manifest(filename):
  df = pd.read_csv(filepath_or_buffer=filename, sep='\t', header=None)
  df.columns = ['SAMPLE_ID', 'R1', 'R2']
  return df

def get_fastq_name(data, forward_reverse, sample_id):
  if forward_reverse == 1:
    return data.loc[data.SAMPLE_ID==sample_id, 'R1'].values[0]
  else:
    return data.loc[data.SAMPLE_ID==sample_id, 'R2'].values[0]

# Retrieving the content of the 'manifest' config variable passed to Snakemake using --config manifest=manifest.tsv
SAMPLES = load_manifest(config['manifest'])
DIRECTORIES = SAMPLES['SAMPLE_ID'].values

workdir: 'output'

rule run_all:
  input: 
    expand('{sample}/metaspades_output/contigs.fasta', sample=DIRECTORIES)

rule run_trimmomatic:
  input:
    r1=lambda wildcards: get_fastq_name(SAMPLES, 1, wildcards.sample),
    r2=lambda wildcards: get_fastq_name(SAMPLES, 2, wildcards.sample)
  output:
    '{sample}/output_1P.fastq.gz',
    '{sample}/output_2P.fastq.gz'
  conda: '{}/envs/env.yaml'.format(cwd)
  shell:
    '''
    TRIMMOMATIC_ADAPTER_PATH=$CONDA_PREFIX/share/trimmomatic-0.38-1/adapters/TruSeq3-PE.fa 
    trimmomatic PE -threads 4 -phred33 \
      -trimlog {wildcards.sample}/trim.log \
      {input.r1} {input.r2} \
      -baseout {wildcards.sample}/output.fastq.gz \
      {config[Trimmomatic][Param1]}
    '''

rule run_metaspades:
  input:
    r1='{sample}/output_1P.fastq.gz',
    r2='{sample}/output_2P.fastq.gz'
  output:
    '{sample}/metaspades_output/contigs.fasta'
  conda: '{}/envs/env.yaml'.format(cwd)
  shell:
    '''
    metaspades.py -1 {input[0]} -2 {input[1]} -o {wildcards.sample}/metaspades_output --tmp-dir {wildcards.sample}/metaspades_output/tmp -t 4
    '''

